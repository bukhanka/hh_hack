"""Seed onboarding presets into database."""

import asyncio
import logging
from database import db_manager, OnboardingPreset

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


PRESETS_DATA = [
    {
        "preset_key": "tech-enthusiast",
        "name": "–¢–µ—Ö–Ω–æ—Ñ–∏–ª",
        "emoji": "üíª",
        "description": "–î–ª—è —Ç–µ—Ö, –∫—Ç–æ –∂–∏–≤—ë—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, AI, —Å—Ç–∞—Ä—Ç–∞–ø—ã, –Ω–æ–≤—ã–µ –≥–∞–¥–∂–µ—Ç—ã",
        "categories": ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "IT", "–°—Ç–∞—Ä—Ç–∞–ø—ã", "AI"],
        "keywords": [
            "AI", "Python", "JavaScript", "Machine Learning", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
            "ChatGPT", "—Å—Ç–∞—Ä—Ç–∞–ø", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "OpenAI",
            "Google", "Meta", "Apple", "Microsoft", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        ],
        "sources": [
            "https://habr.com/ru/rss/hub/programming/all/?fl=ru",
            "https://habr.com/ru/rss/hub/artificial_intelligence/all/?fl=ru",
            "https://www.cnews.ru/inc/rss/news.xml",
            "https://techcrunch.com/feed/",
            "https://www.theverge.com/rss/index.xml",
            "https://vc.ru/rss/all",
            "https://tjournal.ru/rss",
            "https://dev.to/feed",
        ],
        "sort_order": 1
    },
    {
        "preset_key": "business-pro",
        "name": "–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ñ–∏",
        "emoji": "üíº",
        "description": "–î–µ–ª–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: —Å—Ç–∞—Ä—Ç–∞–ø—ã, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, IPO, –≤–µ–Ω—á—É—Ä–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª, —ç–∫–æ–Ω–æ–º–∏–∫–∞",
        "categories": ["–ë–∏–∑–Ω–µ—Å", "–§–∏–Ω–∞–Ω—Å—ã", "–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"],
        "keywords": [
            "—Å—Ç–∞—Ä—Ç–∞–ø—ã", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "IPO", "–≤–µ–Ω—á—É—Ä", "—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "—Ä–∞—É–Ω–¥", "—Å–¥–µ–ª–∫–∞", "M&A", "–∞–∫—Ü–∏–∏", "–±–∏—Ä–∂–∞", "—ç–∫–æ–Ω–æ–º–∏–∫–∞",
            "–±–∏–∑–Ω–µ—Å", "–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "Forbes", "funding"
        ],
        "sources": [
            "https://www.rbc.ru/v10/rss/news/news.rss",
            "https://www.vedomosti.ru/rss/news",
            "https://www.kommersant.ru/RSS/news.xml",
            "https://www.forbes.ru/newsfeed/rss",
            "https://vc.ru/rss/all",
            "https://www.finam.ru/international/newsrss/",
            "https://quote.rbc.ru/news/rss/",
        ],
        "sort_order": 2
    },
    {
        "preset_key": "science-lover",
        "name": "–ù–∞—É—á–Ω—ã–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç",
        "emoji": "üî¨",
        "description": "–ù–∞—É–∫–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: –æ—Ç–∫—Ä—ã—Ç–∏—è, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã, –∫–æ—Å–º–æ—Å, –º–µ–¥–∏—Ü–∏–Ω–∞, –±–∏–æ–ª–æ–≥–∏—è",
        "categories": ["–ù–∞—É–∫–∞", "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–ö–æ—Å–º–æ—Å", "–ú–µ–¥–∏—Ü–∏–Ω–∞"],
        "keywords": [
            "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–æ—Ç–∫—Ä—ã—Ç–∏–µ", "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç", "—É—á—ë–Ω—ã–µ", "–∫–æ—Å–º–æ—Å",
            "NASA", "SpaceX", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–±–∏–æ–ª–æ–≥–∏—è", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è",
            "–Ω–æ–±–µ–ª–µ–≤—Å–∫–∞—è", "–ø—Ä–æ—Ä—ã–≤", "–Ω–∞—É—á–Ω—ã–π", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"
        ],
        "sources": [
            "https://nplus1.ru/rss",
            "https://www.popmech.ru/feed/",
            "https://elementy.ru/rss/news",
            "https://www.space.com/feeds/all",
            "https://naked-science.ru/feed",
            "https://www.scientificamerican.com/feed/",
        ],
        "sort_order": 3
    },
    {
        "preset_key": "all-rounder",
        "name": "–í—Å—ë –ø–æ–Ω–µ–º–Ω–æ–≥—É",
        "emoji": "üåç",
        "description": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—Å–µ—Ö —Å—Ñ–µ—Ä: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –±–∏–∑–Ω–µ—Å, –Ω–∞—É–∫–∞, –æ–±—â–µ—Å—Ç–≤–æ",
        "categories": ["–û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ë–∏–∑–Ω–µ—Å", "–ù–∞—É–∫–∞"],
        "keywords": [
            "–Ω–æ–≤–æ—Å—Ç–∏", "—Å–æ–±—ã—Ç–∏—è", "–≤–∞–∂–Ω–æ–µ", "–≥–ª–∞–≤–Ω–æ–µ", "—Ç–æ–ø",
            "–º–∏—Ä", "–†–æ—Å—Å–∏—è", "–ø–æ–ª–∏—Ç–∏–∫–∞", "–æ–±—â–µ—Å—Ç–≤–æ"
        ],
        "sources": [
            "https://lenta.ru/rss",
            "https://tass.ru/rss/v2.xml",
            "https://ria.ru/export/rss2/archive/index.xml",
            "https://meduza.io/rss/all",
            "https://www.gazeta.ru/export/rss/lenta.xml",
            "https://habr.com/ru/rss/hub/programming/all/?fl=ru",
            "https://www.rbc.ru/v10/rss/news/news.rss",
            "https://nplus1.ru/rss",
            "https://vc.ru/rss/all",
            "https://tjournal.ru/rss",
        ],
        "sort_order": 4
    }
]


async def seed_presets():
    """Seed onboarding presets into database."""
    
    logger.info("Initializing database connection...")
    await db_manager.init_async()
    
    logger.info(f"Seeding {len(PRESETS_DATA)} onboarding presets...")
    
    async with db_manager.get_session() as session:
        from sqlalchemy import select
        from sqlalchemy.dialects.postgresql import insert
        
        for preset_data in PRESETS_DATA:
            # Check if preset already exists
            result = await session.execute(
                select(OnboardingPreset).where(
                    OnboardingPreset.preset_key == preset_data["preset_key"]
                )
            )
            existing = result.scalar_one_or_none()
            
            if existing:
                logger.info(f"Preset '{preset_data['preset_key']}' already exists, updating...")
                # Update existing
                existing.name = preset_data["name"]
                existing.emoji = preset_data["emoji"]
                existing.description = preset_data["description"]
                existing.categories = preset_data["categories"]
                existing.keywords = preset_data["keywords"]
                existing.sources = preset_data["sources"]
                existing.sort_order = preset_data["sort_order"]
                existing.is_active = True
            else:
                logger.info(f"Creating preset '{preset_data['preset_key']}'...")
                # Create new
                preset = OnboardingPreset(
                    preset_key=preset_data["preset_key"],
                    name=preset_data["name"],
                    emoji=preset_data["emoji"],
                    description=preset_data["description"],
                    categories=preset_data["categories"],
                    keywords=preset_data["keywords"],
                    sources=preset_data["sources"],
                    is_active=True,
                    sort_order=preset_data["sort_order"]
                )
                session.add(preset)
        
        await session.flush()
    
    logger.info("‚úÖ Successfully seeded all presets!")
    
    # Verify
    async with db_manager.get_session() as session:
        result = await session.execute(select(OnboardingPreset))
        presets = result.scalars().all()
        logger.info(f"Total presets in database: {len(presets)}")
        for preset in presets:
            logger.info(f"  - {preset.emoji} {preset.name} ({preset.preset_key})")


async def main():
    """Main entry point."""
    try:
        await seed_presets()
    except Exception as e:
        logger.error(f"Error seeding presets: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    asyncio.run(main())

