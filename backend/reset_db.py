"""
–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω—É–ª—è.

–î–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ - –ø—Ä–æ—Å—Ç–æ –¥—Ä–æ–ø–∞–µ–º –≤—Å–µ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ.
"""

import asyncio
import logging
import sys
from pathlib import Path
from sqlalchemy import text

from database import db_manager
from config import settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def reset_database():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã."""
    try:
        logger.info("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await db_manager.init_async()
        
        # –ß–∏—Ç–∞–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é
        migration_file = Path(__file__).parent / 'migrations' / '001_personal_news_tables.sql'
        
        if not migration_file.exists():
            logger.error(f"–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {migration_file}")
            return False
        
        logger.info(f"–ß–∏—Ç–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ {migration_file.name}")
        
        with open(migration_file, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL
        async with db_manager.get_session() as session:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ statements
            statements = [s.strip() for s in sql_content.split(';') if s.strip()]
            
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º {len(statements)} SQL statements...")
            
            for i, statement in enumerate(statements, 1):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if statement.startswith('--') or statement.startswith('/*'):
                    continue
                
                try:
                    await session.execute(text(statement))
                    await session.flush()
                    
                    if i % 10 == 0:
                        logger.info(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–æ {i}/{len(statements)} statements...")
                        
                except Exception as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "already exists"
                    if 'already exists' in str(e).lower() or 'duplicate' in str(e).lower():
                        pass
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ statement {i}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            await session.commit()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")
        logger.info("\n–°–æ–∑–¥–∞–Ω–æ:")
        logger.info("  - –¢–∞–±–ª–∏—Ü—ã –¥–ª—è user profiles, preferences, feed items")
        logger.info("  - –¢–∞–±–ª–∏—Ü—ã –¥–ª—è interactions –∏ learning engine")
        logger.info("  - –¢–∞–±–ª–∏—Ü—ã –¥–ª—è onboarding presets")
        logger.info("  - –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        logger.info("  - Views –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}", exc_info=True)
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("=" * 60)
    logger.info("–ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    logger.info("=" * 60)
    
    success = await reset_database()
    
    if success:
        logger.info("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        sys.exit(0)
    else:
        logger.error("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î.")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())

